/**
 * The client side control of the people finder. Written by Ed&Josh.
 */

angular.module('phoneLocator',['ngMaterial']);

angular.module('phoneLocator').controller('FinderCtrl', function($scope, $http, phoneService) {
    var MINIMUM_QUERY_LENGTH = 3;

    $scope.peopleToEmail = [];
    
    $scope.AppStates = {
        DEFAULT: 0,
        SHOW_PEOPLE: 1,
        NOT_ENOUGH_CHARACTERS: 2,
        LOADING: 3,
        ERROR: 4
    };
    $scope.appState = $scope.AppStates.DEFAULT;

    // $scope.PinStates = {
    //     DEFAULT: 0,
    //     SHOW: 1,
    //     TEMPORARILY_SHOW: 2,
    // };
    // $scope.pinState = $scope.PinStates.DEFAULT;

     // We would like to send a query every time the text changes but as this creates significant
     // overhead, we throttle them by only sending queries for ~1/8 text changes.
     // Additionally, if the user has stopped typing, we also want to send a query as throttling
     // is less of a concern if there is some gap between keystrokes.
     // To accomplish the latter, we set this timeout variable after every text change and cancel
     // the previous ones so that there is only one active timeout function tracking text updates
     // at a time.
     var sendQueryTimeout;
     $scope.onTextChange = function() {
        // We throttle by using a random number generator. Note that if the query is too short,
        // we handle it right away because we already know what to do with it.
        if (Math.random() * 8 >= 7 || isQueryTooShort()) {
            maybeDoQuery();
        } else {
            clearSendQueryTimeout();
            sendQueryTimeout = setTimeout(maybeDoQuery, 500);
        }
     };

     // When submitting queries is manually triggered.
     $scope.submitQuery = function(opt_seeMore) {
         maybeDoQuery(opt_seeMore);
     };

     // A helper function to actually make the query.
     function maybeDoQuery(opt_seeMore) {
        var queryTooShort = isQueryTooShort();
        if (queryTooShort) {
            $scope.appState = $scope.AppStates.NOT_ENOUGH_CHARACTERS;
            return;
        }

        var query = $scope.query;

        // Don't make the same request twice.
        if (query == currentRequestQuery && !opt_seeMore) {
            return;
        }

        if (opt_seeMore) {
            logRequest(LOG_TYPES.SEE_ALL_PRESSED);
        }
        
        // We also cancel the previous timeout every time we make a query as an added safety
        // mechanism (e.g., if the user presses enter to send a request).
        clearSendQueryTimeout();

        // TODO(josh): Use ng-animate to make this more effective.
        $scope.appState = $scope.AppStates.LOADING;

        currentRequestQuery = $scope.query;
        phoneService.get($scope.query, opt_seeMore)
            .success(function(data) {
                handleResponse(data, query);
            })
            .error(function() {
                $scope.appState = $scope.AppStates.ERROR;
            });
        logRequest(LOG_TYPES.REQUEST);
     };

     // A global variable that tracks the query that was most recently sent. This makes sure that if
     // a second query was sent before the first one returns, we abandon the first response and stick
     // with the second.
     var currentRequestQuery;
     function handleResponse(data, query) {
        if (query != currentRequestQuery) {
            // Abandon the response because we'll have a more updated one soon.
            return;
        }

        $scope.appState = $scope.AppStates.SHOW_PEOPLE;
        // The first item in data should be the metadata object. Everything else is people.
        $scope.metadata = data.splice(0,1)[0];
        $scope.people = data;
     };

     function clearSendQueryTimeout() {
        clearTimeout(sendQueryTimeout);
     };

     // A valid query must contain at least one space-separated word that is at least
     // MINIMUM_QUERY_LENGTH characters long.
     function isQueryTooShort() {
        var hasWordOfAppropriateLength = false;
        cleanQuery($scope.query).split(' ').forEach(word => {
            if (word.length >= MINIMUM_QUERY_LENGTH) {
                hasWordOfAppropriateLength = true;
            }
        });
        return !hasWordOfAppropriateLength;        
     }

     
     // If the user taps on an email address field, close the extension and redirect to an email URL.
     $scope.sendEmail = function(email) {
        logRequest(LOG_TYPES.MAIL);
        var emailUrl = 'mailto:' + email;
        chrome.tabs.create({ url: emailUrl, active: false }, function (tab) {
            setTimeout(function() {
                chrome.tabs.remove(tab.id);
            }, 500);
        });
     };

     $scope.sendMailToPinned = function() {
        var emails = '';
        $scope.peopleToEmail.forEach(person => {
            emails += person.mail+';';
        });
        $scope.sendEmail(emails);
     };

     $scope.togglePinPerson = function(person) {
        if ($scope.isPinned(person)) {
            $scope.unpin(person);
        } else {
            pinPerson(person);
        }
     };

     $scope.clearPinned = function() {
        $scope.peopleToEmail = [];
     };

     function pinPerson(person) {
        if ($scope.peopleToEmail.length > 1000) {
            alert('יותר מדי :(');
            return;
        }
        $scope.peopleToEmail.push(person);
     }

     $scope.isPinned = function(person) {
        for (var i = 0; i < $scope.peopleToEmail.length; i++) {
            if ($scope.peopleToEmail[i].mail == person.mail) {
                return true;
            }
        }
        return false;
     }

     $scope.unpin = function(person) {
        var indexOfPerson = $scope.peopleToEmail.indexOf(person);
        $scope.peopleToEmail.splice(indexOfPerson, 1);
     }

     $scope.onMorePressed = function() {
        logRequest(LOG_TYPES.MORE_PRESSED);
     };

    // TODO(Josh): Move this to a module or something like that.
    var LOG_TYPES = {
        INITIAL: 'initial',
        MAIL: 'mail',
        REQUEST: 'request',
        MORE_PRESSED: 'morepressed',
        SEE_ALL_PRESSED: 'seeallpressed',
        TIMER: 'timer'
    };

    function logRequest(logType) {
        var logString = SESSION_ID + ',' + logType;
        if (logType == LOG_TYPES.REQUEST) {
            logString += ',' + cleanQuery($scope.query);
        }

        $http.get(SERVER + 'log/' + encodeURIComponent(cleanQuery(logString)));
    }

    logRequest(LOG_TYPES.INITIAL);

    window.setInterval(function() {logRequest(LOG_TYPES.TIMER)}, 1000);
});

angular.module('phoneLocator').service('phoneService', function($http){
    return {
        // Already assumes that data validation has been done on query (e.g., for length).
        get: function(query, opt_seeMore) {
            var seeMoreString = opt_seeMore ? '1/' : '0/';
            var encodedQuery = encodeURIComponent(cleanQuery(query));
            return $http.get(SERVER + seeMoreString + encodedQuery);
        }
    };
});

function cleanQuery(query) {
    // TODO(josh): Some characters seem to cause issues so use a space instead.
    var queryWithoutBadCharacters =
        query.replace('.', ' ').replace('+', ' ').replace(':', ' ').replace('%', ' ').trim();
    // Make sure there are no double spaces.
    while (queryWithoutBadCharacters.indexOf('  ') != -1) {
        queryWithoutBadCharacters.replace('  ', '');
    }
    return queryWithoutBadCharacters;
}

var SERVER = 'http://app0111laka01.iaf/PplFndr/api/values/';
 // var SERVER = 'http://localhost:34781/api/values/';

var SESSION_ID = Date.now() + Math.random();