#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Innovation")]
	public partial class LogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertQueryTime(QueryTime instance);
    partial void UpdateQueryTime(QueryTime instance);
    partial void DeleteQueryTime(QueryTime instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    #endregion
		
		public LogDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["InnovationConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<QueryTime> QueryTimes
		{
			get
			{
				return this.GetTable<QueryTime>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requests")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Request1;
		
		private string _ID;
		
		private System.DateTime _Time;
		
		private EntityRef<Log> _Log;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequest1Changing(string value);
    partial void OnRequest1Changed();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public Request()
		{
			this._Log = default(EntityRef<Log>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Request", Storage="_Request1", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Request1
		{
			get
			{
				return this._Request1;
			}
			set
			{
				if ((this._Request1 != value))
				{
					this.OnRequest1Changing(value);
					this.SendPropertyChanging();
					this._Request1 = value;
					this.SendPropertyChanged("Request1");
					this.OnRequest1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Log.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Request", Storage="_Log", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Log Log
		{
			get
			{
				return this._Log.Entity;
			}
			set
			{
				Log previousValue = this._Log.Entity;
				if (((previousValue != value) 
							|| (this._Log.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Log.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Log.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(string);
					}
					this.SendPropertyChanged("Log");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueryTimes")]
	public partial class QueryTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _Elapsed;
		
		private string _Query;
		
		private System.DateTime _Now;
		
		private bool _ShowAll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnElapsedChanging(double value);
    partial void OnElapsedChanged();
    partial void OnQueryChanging(string value);
    partial void OnQueryChanged();
    partial void OnNowChanging(System.DateTime value);
    partial void OnNowChanged();
    partial void OnShowAllChanging(bool value);
    partial void OnShowAllChanged();
    #endregion
		
		public QueryTime()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Elapsed", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double Elapsed
		{
			get
			{
				return this._Elapsed;
			}
			set
			{
				if ((this._Elapsed != value))
				{
					this.OnElapsedChanging(value);
					this.SendPropertyChanging();
					this._Elapsed = value;
					this.SendPropertyChanged("Elapsed");
					this.OnElapsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Query", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Query
		{
			get
			{
				return this._Query;
			}
			set
			{
				if ((this._Query != value))
				{
					this.OnQueryChanging(value);
					this.SendPropertyChanging();
					this._Query = value;
					this.SendPropertyChanged("Query");
					this.OnQueryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Now", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Now
		{
			get
			{
				return this._Now;
			}
			set
			{
				if ((this._Now != value))
				{
					this.OnNowChanging(value);
					this.SendPropertyChanging();
					this._Now = value;
					this.SendPropertyChanged("Now");
					this.OnNowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAll", DbType="Bit NOT NULL")]
		public bool ShowAll
		{
			get
			{
				return this._ShowAll;
			}
			set
			{
				if ((this._ShowAll != value))
				{
					this.OnShowAllChanging(value);
					this.SendPropertyChanging();
					this._ShowAll = value;
					this.SendPropertyChanged("ShowAll");
					this.OnShowAllChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<int> _RequestsMade;
		
		private System.Nullable<int> _MailSent;
		
		private System.Nullable<int> _MorePressed;
		
		private System.Nullable<int> _SeeAllPressed;
		
		private System.Nullable<System.DateTime> _TimeCreated;
		
		private System.Nullable<int> _Timer;
		
		private EntitySet<Request> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnRequestsMadeChanging(System.Nullable<int> value);
    partial void OnRequestsMadeChanged();
    partial void OnMailSentChanging(System.Nullable<int> value);
    partial void OnMailSentChanged();
    partial void OnMorePressedChanging(System.Nullable<int> value);
    partial void OnMorePressedChanged();
    partial void OnSeeAllPressedChanging(System.Nullable<int> value);
    partial void OnSeeAllPressedChanged();
    partial void OnTimeCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeCreatedChanged();
    partial void OnTimerChanging(System.Nullable<int> value);
    partial void OnTimerChanged();
    #endregion
		
		public Log()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestsMade", DbType="Int")]
		public System.Nullable<int> RequestsMade
		{
			get
			{
				return this._RequestsMade;
			}
			set
			{
				if ((this._RequestsMade != value))
				{
					this.OnRequestsMadeChanging(value);
					this.SendPropertyChanging();
					this._RequestsMade = value;
					this.SendPropertyChanged("RequestsMade");
					this.OnRequestsMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailSent", DbType="Int")]
		public System.Nullable<int> MailSent
		{
			get
			{
				return this._MailSent;
			}
			set
			{
				if ((this._MailSent != value))
				{
					this.OnMailSentChanging(value);
					this.SendPropertyChanging();
					this._MailSent = value;
					this.SendPropertyChanged("MailSent");
					this.OnMailSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MorePressed", DbType="Int")]
		public System.Nullable<int> MorePressed
		{
			get
			{
				return this._MorePressed;
			}
			set
			{
				if ((this._MorePressed != value))
				{
					this.OnMorePressedChanging(value);
					this.SendPropertyChanging();
					this._MorePressed = value;
					this.SendPropertyChanged("MorePressed");
					this.OnMorePressedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeeAllPressed", DbType="Int")]
		public System.Nullable<int> SeeAllPressed
		{
			get
			{
				return this._SeeAllPressed;
			}
			set
			{
				if ((this._SeeAllPressed != value))
				{
					this.OnSeeAllPressedChanging(value);
					this.SendPropertyChanging();
					this._SeeAllPressed = value;
					this.SendPropertyChanged("SeeAllPressed");
					this.OnSeeAllPressedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeCreated
		{
			get
			{
				return this._TimeCreated;
			}
			set
			{
				if ((this._TimeCreated != value))
				{
					this.OnTimeCreatedChanging(value);
					this.SendPropertyChanging();
					this._TimeCreated = value;
					this.SendPropertyChanged("TimeCreated");
					this.OnTimeCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timer", DbType="Int")]
		public System.Nullable<int> Timer
		{
			get
			{
				return this._Timer;
			}
			set
			{
				if ((this._Timer != value))
				{
					this.OnTimerChanging(value);
					this.SendPropertyChanging();
					this._Timer = value;
					this.SendPropertyChanged("Timer");
					this.OnTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Log_Request", Storage="_Requests", ThisKey="ID", OtherKey="ID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Log = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Log = null;
		}
	}
}
#pragma warning restore 1591
